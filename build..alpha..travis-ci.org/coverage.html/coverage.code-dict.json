{"/home/travis/build/npmtest/node-npmtest-xhr2/test.js":"/* istanbul instrument in package npmtest_xhr2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-xhr2/lib.npmtest_xhr2.js":"/* istanbul instrument in package npmtest_xhr2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_xhr2 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_xhr2 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-xhr2/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-xhr2 && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_xhr2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_xhr2\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_xhr2.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_xhr2.rollup.js'] =\n            local.assetsDict['/assets.npmtest_xhr2.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_xhr2.__dirname +\n                    '/lib.npmtest_xhr2.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-xhr2/node_modules/xhr2/lib/xhr2.js":"// Generated by CoffeeScript 1.12.2\n(function() {\n  var InvalidStateError, NetworkError, ProgressEvent, SecurityError, SyntaxError, XMLHttpRequest, XMLHttpRequestEventTarget, XMLHttpRequestUpload, http, https, os, url,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  XMLHttpRequestEventTarget = (function() {\n    function XMLHttpRequestEventTarget() {\n      this.onloadstart = null;\n      this.onprogress = null;\n      this.onabort = null;\n      this.onerror = null;\n      this.onload = null;\n      this.ontimeout = null;\n      this.onloadend = null;\n      this._listeners = {};\n    }\n\n    XMLHttpRequestEventTarget.prototype.onloadstart = null;\n\n    XMLHttpRequestEventTarget.prototype.onprogress = null;\n\n    XMLHttpRequestEventTarget.prototype.onabort = null;\n\n    XMLHttpRequestEventTarget.prototype.onerror = null;\n\n    XMLHttpRequestEventTarget.prototype.onload = null;\n\n    XMLHttpRequestEventTarget.prototype.ontimeout = null;\n\n    XMLHttpRequestEventTarget.prototype.onloadend = null;\n\n    XMLHttpRequestEventTarget.prototype.addEventListener = function(eventType, listener) {\n      var base;\n      eventType = eventType.toLowerCase();\n      (base = this._listeners)[eventType] || (base[eventType] = []);\n      this._listeners[eventType].push(listener);\n      return void 0;\n    };\n\n    XMLHttpRequestEventTarget.prototype.removeEventListener = function(eventType, listener) {\n      var index;\n      eventType = eventType.toLowerCase();\n      if (this._listeners[eventType]) {\n        index = this._listeners[eventType].indexOf(listener);\n        if (index !== -1) {\n          this._listeners[eventType].splice(index, 1);\n        }\n      }\n      return void 0;\n    };\n\n    XMLHttpRequestEventTarget.prototype.dispatchEvent = function(event) {\n      var eventType, j, len, listener, listeners;\n      event.currentTarget = event.target = this;\n      eventType = event.type;\n      if (listeners = this._listeners[eventType]) {\n        for (j = 0, len = listeners.length; j < len; j++) {\n          listener = listeners[j];\n          listener.call(this, event);\n        }\n      }\n      if (listener = this[\"on\" + eventType]) {\n        listener.call(this, event);\n      }\n      return void 0;\n    };\n\n    return XMLHttpRequestEventTarget;\n\n  })();\n\n  http = require('http');\n\n  https = require('https');\n\n  os = require('os');\n\n  url = require('url');\n\n  XMLHttpRequest = (function(superClass) {\n    extend(XMLHttpRequest, superClass);\n\n    function XMLHttpRequest(options) {\n      XMLHttpRequest.__super__.constructor.call(this);\n      this.onreadystatechange = null;\n      this._anonymous = options && options.anon;\n      this.readyState = XMLHttpRequest.UNSENT;\n      this.response = null;\n      this.responseText = '';\n      this.responseType = '';\n      this.responseURL = '';\n      this.status = 0;\n      this.statusText = '';\n      this.timeout = 0;\n      this.upload = new XMLHttpRequestUpload(this);\n      this._method = null;\n      this._url = null;\n      this._sync = false;\n      this._headers = null;\n      this._loweredHeaders = null;\n      this._mimeOverride = null;\n      this._request = null;\n      this._response = null;\n      this._responseParts = null;\n      this._responseHeaders = null;\n      this._aborting = null;\n      this._error = null;\n      this._loadedBytes = 0;\n      this._totalBytes = 0;\n      this._lengthComputable = false;\n    }\n\n    XMLHttpRequest.prototype.onreadystatechange = null;\n\n    XMLHttpRequest.prototype.readyState = null;\n\n    XMLHttpRequest.prototype.response = null;\n\n    XMLHttpRequest.prototype.responseText = null;\n\n    XMLHttpRequest.prototype.responseType = null;\n\n    XMLHttpRequest.prototype.status = null;\n\n    XMLHttpRequest.prototype.timeout = null;\n\n    XMLHttpRequest.prototype.upload = null;\n\n    XMLHttpRequest.prototype.open = function(method, url, async, user, password) {\n      var xhrUrl;\n      method = method.toUpperCase();\n      if (method in this._restrictedMethods) {\n        throw new SecurityError(\"HTTP method \" + method + \" is not allowed in XHR\");\n      }\n      xhrUrl = this._parseUrl(url);\n      if (async === void 0) {\n        async = true;\n      }\n      switch (this.readyState) {\n        case XMLHttpRequest.UNSENT:\n        case XMLHttpRequest.OPENED:\n        case XMLHttpRequest.DONE:\n          null;\n          break;\n        case XMLHttpRequest.HEADERS_RECEIVED:\n        case XMLHttpRequest.LOADING:\n          null;\n      }\n      this._method = method;\n      this._url = xhrUrl;\n      this._sync = !async;\n      this._headers = {};\n      this._loweredHeaders = {};\n      this._mimeOverride = null;\n      this._setReadyState(XMLHttpRequest.OPENED);\n      this._request = null;\n      this._response = null;\n      this.status = 0;\n      this.statusText = '';\n      this._responseParts = [];\n      this._responseHeaders = null;\n      this._loadedBytes = 0;\n      this._totalBytes = 0;\n      this._lengthComputable = false;\n      return void 0;\n    };\n\n    XMLHttpRequest.prototype.setRequestHeader = function(name, value) {\n      var loweredName;\n      if (this.readyState !== XMLHttpRequest.OPENED) {\n        throw new InvalidStateError(\"XHR readyState must be OPENED\");\n      }\n      loweredName = name.toLowerCase();\n      if (this._restrictedHeaders[loweredName] || /^sec\\-/.test(loweredName) || /^proxy-/.test(loweredName)) {\n        console.warn(\"Refused to set unsafe header \\\"\" + name + \"\\\"\");\n        return void 0;\n      }\n      value = value.toString();\n      if (loweredName in this._loweredHeaders) {\n        name = this._loweredHeaders[loweredName];\n        this._headers[name] = this._headers[name] + ', ' + value;\n      } else {\n        this._loweredHeaders[loweredName] = name;\n        this._headers[name] = value;\n      }\n      return void 0;\n    };\n\n    XMLHttpRequest.prototype.send = function(data) {\n      if (this.readyState !== XMLHttpRequest.OPENED) {\n        throw new InvalidStateError(\"XHR readyState must be OPENED\");\n      }\n      if (this._request) {\n        throw new InvalidStateError(\"send() already called\");\n      }\n      switch (this._url.protocol) {\n        case 'file:':\n          this._sendFile(data);\n          break;\n        case 'http:':\n        case 'https:':\n          this._sendHttp(data);\n          break;\n        default:\n          throw new NetworkError(\"Unsupported protocol \" + this._url.protocol);\n      }\n      return void 0;\n    };\n\n    XMLHttpRequest.prototype.abort = function() {\n      if (!this._request) {\n        return;\n      }\n      this._request.abort();\n      this._setError();\n      this._dispatchProgress('abort');\n      this._dispatchProgress('loadend');\n      return void 0;\n    };\n\n    XMLHttpRequest.prototype.getResponseHeader = function(name) {\n      var loweredName;\n      if (!this._responseHeaders) {\n        return null;\n      }\n      loweredName = name.toLowerCase();\n      if (loweredName in this._responseHeaders) {\n        return this._responseHeaders[loweredName];\n      } else {\n        return null;\n      }\n    };\n\n    XMLHttpRequest.prototype.getAllResponseHeaders = function() {\n      var lines, name, value;\n      if (!this._responseHeaders) {\n        return '';\n      }\n      lines = (function() {\n        var ref, results;\n        ref = this._responseHeaders;\n        results = [];\n        for (name in ref) {\n          value = ref[name];\n          results.push(name + \": \" + value);\n        }\n        return results;\n      }).call(this);\n      return lines.join(\"\\r\\n\");\n    };\n\n    XMLHttpRequest.prototype.overrideMimeType = function(newMimeType) {\n      if (this.readyState === XMLHttpRequest.LOADING || this.readyState === XMLHttpRequest.DONE) {\n        throw new InvalidStateError(\"overrideMimeType() not allowed in LOADING or DONE\");\n      }\n      this._mimeOverride = newMimeType.toLowerCase();\n      return void 0;\n    };\n\n    XMLHttpRequest.prototype.nodejsSet = function(options) {\n      var baseUrl, parsedUrl;\n      if ('httpAgent' in options) {\n        this.nodejsHttpAgent = options.httpAgent;\n      }\n      if ('httpsAgent' in options) {\n        this.nodejsHttpsAgent = options.httpsAgent;\n      }\n      if ('baseUrl' in options) {\n        baseUrl = options.baseUrl;\n        if (baseUrl !== null) {\n          parsedUrl = url.parse(baseUrl, false, true);\n          if (!parsedUrl.protocol) {\n            throw new SyntaxError(\"baseUrl must be an absolute URL\");\n          }\n        }\n        this.nodejsBaseUrl = baseUrl;\n      }\n      return void 0;\n    };\n\n    XMLHttpRequest.nodejsSet = function(options) {\n      XMLHttpRequest.prototype.nodejsSet(options);\n      return void 0;\n    };\n\n    XMLHttpRequest.prototype.UNSENT = 0;\n\n    XMLHttpRequest.UNSENT = 0;\n\n    XMLHttpRequest.prototype.OPENED = 1;\n\n    XMLHttpRequest.OPENED = 1;\n\n    XMLHttpRequest.prototype.HEADERS_RECEIVED = 2;\n\n    XMLHttpRequest.HEADERS_RECEIVED = 2;\n\n    XMLHttpRequest.prototype.LOADING = 3;\n\n    XMLHttpRequest.LOADING = 3;\n\n    XMLHttpRequest.prototype.DONE = 4;\n\n    XMLHttpRequest.DONE = 4;\n\n    XMLHttpRequest.prototype.nodejsHttpAgent = http.globalAgent;\n\n    XMLHttpRequest.prototype.nodejsHttpsAgent = https.globalAgent;\n\n    XMLHttpRequest.prototype.nodejsBaseUrl = null;\n\n    XMLHttpRequest.prototype._restrictedMethods = {\n      CONNECT: true,\n      TRACE: true,\n      TRACK: true\n    };\n\n    XMLHttpRequest.prototype._restrictedHeaders = {\n      'accept-charset': true,\n      'accept-encoding': true,\n      'access-control-request-headers': true,\n      'access-control-request-method': true,\n      connection: true,\n      'content-length': true,\n      cookie: true,\n      cookie2: true,\n      date: true,\n      dnt: true,\n      expect: true,\n      host: true,\n      'keep-alive': true,\n      origin: true,\n      referer: true,\n      te: true,\n      trailer: true,\n      'transfer-encoding': true,\n      upgrade: true,\n      'user-agent': true,\n      via: true\n    };\n\n    XMLHttpRequest.prototype._privateHeaders = {\n      'set-cookie': true,\n      'set-cookie2': true\n    };\n\n    XMLHttpRequest.prototype._userAgent = (\"Mozilla/5.0 (\" + (os.type()) + \" \" + (os.arch()) + \") \") + (\"node.js/\" + process.versions.node + \" v8/\" + process.versions.v8);\n\n    XMLHttpRequest.prototype._setReadyState = function(newReadyState) {\n      var event;\n      this.readyState = newReadyState;\n      event = new ProgressEvent('readystatechange');\n      this.dispatchEvent(event);\n      return void 0;\n    };\n\n    XMLHttpRequest.prototype._sendFile = function() {\n      if (this._url.method !== 'GET') {\n        throw new NetworkError('The file protocol only supports GET');\n      }\n      throw new Error(\"Protocol file: not implemented\");\n    };\n\n    XMLHttpRequest.prototype._sendHttp = function(data) {\n      if (this._sync) {\n        throw new Error(\"Synchronous XHR processing not implemented\");\n      }\n      if ((data != null) && (this._method === 'GET' || this._method === 'HEAD')) {\n        console.warn(\"Discarding entity body for \" + this._method + \" requests\");\n        data = null;\n      } else {\n        data || (data = '');\n      }\n      this.upload._setData(data);\n      this._finalizeHeaders();\n      this._sendHxxpRequest();\n      return void 0;\n    };\n\n    XMLHttpRequest.prototype._sendHxxpRequest = function() {\n      var agent, hxxp, request;\n      if (this._url.protocol === 'http:') {\n        hxxp = http;\n        agent = this.nodejsHttpAgent;\n      } else {\n        hxxp = https;\n        agent = this.nodejsHttpsAgent;\n      }\n      request = hxxp.request({\n        hostname: this._url.hostname,\n        port: this._url.port,\n        path: this._url.path,\n        auth: this._url.auth,\n        method: this._method,\n        headers: this._headers,\n        agent: agent\n      });\n      this._request = request;\n      if (this.timeout) {\n        request.setTimeout(this.timeout, (function(_this) {\n          return function() {\n            return _this._onHttpTimeout(request);\n          };\n        })(this));\n      }\n      request.on('response', (function(_this) {\n        return function(response) {\n          return _this._onHttpResponse(request, response);\n        };\n      })(this));\n      request.on('error', (function(_this) {\n        return function(error) {\n          return _this._onHttpRequestError(request, error);\n        };\n      })(this));\n      this.upload._startUpload(request);\n      if (this._request === request) {\n        this._dispatchProgress('loadstart');\n      }\n      return void 0;\n    };\n\n    XMLHttpRequest.prototype._finalizeHeaders = function() {\n      this._headers['Connection'] = 'keep-alive';\n      this._headers['Host'] = this._url.host;\n      if (this._anonymous) {\n        this._headers['Referer'] = 'about:blank';\n      }\n      this._headers['User-Agent'] = this._userAgent;\n      this.upload._finalizeHeaders(this._headers, this._loweredHeaders);\n      return void 0;\n    };\n\n    XMLHttpRequest.prototype._onHttpResponse = function(request, response) {\n      var lengthString;\n      if (this._request !== request) {\n        return;\n      }\n      switch (response.statusCode) {\n        case 301:\n        case 302:\n        case 303:\n        case 307:\n        case 308:\n          this._url = this._parseUrl(response.headers['location']);\n          this._method = 'GET';\n          if ('content-type' in this._loweredHeaders) {\n            delete this._headers[this._loweredHeaders['content-type']];\n            delete this._loweredHeaders['content-type'];\n          }\n          if ('Content-Type' in this._headers) {\n            delete this._headers['Content-Type'];\n          }\n          delete this._headers['Content-Length'];\n          this.upload._reset();\n          this._finalizeHeaders();\n          this._sendHxxpRequest();\n          return;\n      }\n      this._response = response;\n      this._response.on('data', (function(_this) {\n        return function(data) {\n          return _this._onHttpResponseData(response, data);\n        };\n      })(this));\n      this._response.on('end', (function(_this) {\n        return function() {\n          return _this._onHttpResponseEnd(response);\n        };\n      })(this));\n      this._response.on('close', (function(_this) {\n        return function() {\n          return _this._onHttpResponseClose(response);\n        };\n      })(this));\n      this.responseURL = this._url.href.split('#')[0];\n      this.status = this._response.statusCode;\n      this.statusText = http.STATUS_CODES[this.status];\n      this._parseResponseHeaders(response);\n      if (lengthString = this._responseHeaders['content-length']) {\n        this._totalBytes = parseInt(lengthString);\n        this._lengthComputable = true;\n      } else {\n        this._lengthComputable = false;\n      }\n      return this._setReadyState(XMLHttpRequest.HEADERS_RECEIVED);\n    };\n\n    XMLHttpRequest.prototype._onHttpResponseData = function(response, data) {\n      if (this._response !== response) {\n        return;\n      }\n      this._responseParts.push(data);\n      this._loadedBytes += data.length;\n      if (this.readyState !== XMLHttpRequest.LOADING) {\n        this._setReadyState(XMLHttpRequest.LOADING);\n      }\n      return this._dispatchProgress('progress');\n    };\n\n    XMLHttpRequest.prototype._onHttpResponseEnd = function(response) {\n      if (this._response !== response) {\n        return;\n      }\n      this._parseResponse();\n      this._request = null;\n      this._response = null;\n      this._setReadyState(XMLHttpRequest.DONE);\n      this._dispatchProgress('load');\n      return this._dispatchProgress('loadend');\n    };\n\n    XMLHttpRequest.prototype._onHttpResponseClose = function(response) {\n      var request;\n      if (this._response !== response) {\n        return;\n      }\n      request = this._request;\n      this._setError();\n      request.abort();\n      this._setReadyState(XMLHttpRequest.DONE);\n      this._dispatchProgress('error');\n      return this._dispatchProgress('loadend');\n    };\n\n    XMLHttpRequest.prototype._onHttpTimeout = function(request) {\n      if (this._request !== request) {\n        return;\n      }\n      this._setError();\n      request.abort();\n      this._setReadyState(XMLHttpRequest.DONE);\n      this._dispatchProgress('timeout');\n      return this._dispatchProgress('loadend');\n    };\n\n    XMLHttpRequest.prototype._onHttpRequestError = function(request, error) {\n      if (this._request !== request) {\n        return;\n      }\n      this._setError();\n      request.abort();\n      this._setReadyState(XMLHttpRequest.DONE);\n      this._dispatchProgress('error');\n      return this._dispatchProgress('loadend');\n    };\n\n    XMLHttpRequest.prototype._dispatchProgress = function(eventType) {\n      var event;\n      event = new ProgressEvent(eventType);\n      event.lengthComputable = this._lengthComputable;\n      event.loaded = this._loadedBytes;\n      event.total = this._totalBytes;\n      this.dispatchEvent(event);\n      return void 0;\n    };\n\n    XMLHttpRequest.prototype._setError = function() {\n      this._request = null;\n      this._response = null;\n      this._responseHeaders = null;\n      this._responseParts = null;\n      return void 0;\n    };\n\n    XMLHttpRequest.prototype._parseUrl = function(urlString) {\n      var absoluteUrlString, index, password, user, xhrUrl;\n      if (this.nodejsBaseUrl === null) {\n        absoluteUrlString = urlString;\n      } else {\n        absoluteUrlString = url.resolve(this.nodejsBaseUrl, urlString);\n      }\n      xhrUrl = url.parse(absoluteUrlString, false, true);\n      xhrUrl.hash = null;\n      if (xhrUrl.auth && ((typeof user !== \"undefined\" && user !== null) || (typeof password !== \"undefined\" && password !== null))) {\n        index = xhrUrl.auth.indexOf(':');\n        if (index === -1) {\n          if (!user) {\n            user = xhrUrl.auth;\n          }\n        } else {\n          if (!user) {\n            user = xhrUrl.substring(0, index);\n          }\n          if (!password) {\n            password = xhrUrl.substring(index + 1);\n          }\n        }\n      }\n      if (user || password) {\n        xhrUrl.auth = user + \":\" + password;\n      }\n      return xhrUrl;\n    };\n\n    XMLHttpRequest.prototype._parseResponseHeaders = function(response) {\n      var loweredName, name, ref, value;\n      this._responseHeaders = {};\n      ref = response.headers;\n      for (name in ref) {\n        value = ref[name];\n        loweredName = name.toLowerCase();\n        if (this._privateHeaders[loweredName]) {\n          continue;\n        }\n        if (this._mimeOverride !== null && loweredName === 'content-type') {\n          value = this._mimeOverride;\n        }\n        this._responseHeaders[loweredName] = value;\n      }\n      if (this._mimeOverride !== null && !('content-type' in this._responseHeaders)) {\n        this._responseHeaders['content-type'] = this._mimeOverride;\n      }\n      return void 0;\n    };\n\n    XMLHttpRequest.prototype._parseResponse = function() {\n      var arrayBuffer, buffer, i, j, jsonError, ref, view;\n      if (Buffer.concat) {\n        buffer = Buffer.concat(this._responseParts);\n      } else {\n        buffer = this._concatBuffers(this._responseParts);\n      }\n      this._responseParts = null;\n      switch (this.responseType) {\n        case 'text':\n          this._parseTextResponse(buffer);\n          break;\n        case 'json':\n          this.responseText = null;\n          try {\n            this.response = JSON.parse(buffer.toString('utf-8'));\n          } catch (error1) {\n            jsonError = error1;\n            this.response = null;\n          }\n          break;\n        case 'buffer':\n          this.responseText = null;\n          this.response = buffer;\n          break;\n        case 'arraybuffer':\n          this.responseText = null;\n          arrayBuffer = new ArrayBuffer(buffer.length);\n          view = new Uint8Array(arrayBuffer);\n          for (i = j = 0, ref = buffer.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n            view[i] = buffer[i];\n          }\n          this.response = arrayBuffer;\n          break;\n        default:\n          this._parseTextResponse(buffer);\n      }\n      return void 0;\n    };\n\n    XMLHttpRequest.prototype._parseTextResponse = function(buffer) {\n      var e;\n      try {\n        this.responseText = buffer.toString(this._parseResponseEncoding());\n      } catch (error1) {\n        e = error1;\n        this.responseText = buffer.toString('binary');\n      }\n      this.response = this.responseText;\n      return void 0;\n    };\n\n    XMLHttpRequest.prototype._parseResponseEncoding = function() {\n      var contentType, encoding, match;\n      encoding = null;\n      if (contentType = this._responseHeaders['content-type']) {\n        if (match = /\\;\\s*charset\\=(.*)$/.exec(contentType)) {\n          return match[1];\n        }\n      }\n      return 'utf-8';\n    };\n\n    XMLHttpRequest.prototype._concatBuffers = function(buffers) {\n      var buffer, j, k, len, len1, length, target;\n      if (buffers.length === 0) {\n        return new Buffer(0);\n      }\n      if (buffers.length === 1) {\n        return buffers[0];\n      }\n      length = 0;\n      for (j = 0, len = buffers.length; j < len; j++) {\n        buffer = buffers[j];\n        length += buffer.length;\n      }\n      target = new Buffer(length);\n      length = 0;\n      for (k = 0, len1 = buffers.length; k < len1; k++) {\n        buffer = buffers[k];\n        buffer.copy(target, length);\n        length += buffer.length;\n      }\n      return target;\n    };\n\n    return XMLHttpRequest;\n\n  })(XMLHttpRequestEventTarget);\n\n  module.exports = XMLHttpRequest;\n\n  XMLHttpRequest.XMLHttpRequest = XMLHttpRequest;\n\n  SecurityError = (function(superClass) {\n    extend(SecurityError, superClass);\n\n    function SecurityError() {\n      SecurityError.__super__.constructor.apply(this, arguments);\n    }\n\n    return SecurityError;\n\n  })(Error);\n\n  XMLHttpRequest.SecurityError = SecurityError;\n\n  InvalidStateError = (function(superClass) {\n    extend(InvalidStateError, superClass);\n\n    function InvalidStateError() {\n      InvalidStateError.__super__.constructor.apply(this, arguments);\n    }\n\n    return InvalidStateError;\n\n  })(Error);\n\n  InvalidStateError = (function(superClass) {\n    extend(InvalidStateError, superClass);\n\n    function InvalidStateError() {\n      return InvalidStateError.__super__.constructor.apply(this, arguments);\n    }\n\n    return InvalidStateError;\n\n  })(Error);\n\n  XMLHttpRequest.InvalidStateError = InvalidStateError;\n\n  NetworkError = (function(superClass) {\n    extend(NetworkError, superClass);\n\n    function NetworkError() {\n      NetworkError.__super__.constructor.apply(this, arguments);\n    }\n\n    return NetworkError;\n\n  })(Error);\n\n  XMLHttpRequest.SyntaxError = SyntaxError;\n\n  SyntaxError = (function(superClass) {\n    extend(SyntaxError, superClass);\n\n    function SyntaxError() {\n      SyntaxError.__super__.constructor.apply(this, arguments);\n    }\n\n    return SyntaxError;\n\n  })(Error);\n\n  ProgressEvent = (function() {\n    function ProgressEvent(type) {\n      this.type = type;\n      this.target = null;\n      this.currentTarget = null;\n      this.lengthComputable = false;\n      this.loaded = 0;\n      this.total = 0;\n    }\n\n    ProgressEvent.prototype.bubbles = false;\n\n    ProgressEvent.prototype.cancelable = false;\n\n    ProgressEvent.prototype.target = null;\n\n    ProgressEvent.prototype.loaded = null;\n\n    ProgressEvent.prototype.lengthComputable = null;\n\n    ProgressEvent.prototype.total = null;\n\n    return ProgressEvent;\n\n  })();\n\n  XMLHttpRequest.ProgressEvent = ProgressEvent;\n\n  XMLHttpRequestUpload = (function(superClass) {\n    extend(XMLHttpRequestUpload, superClass);\n\n    function XMLHttpRequestUpload(request) {\n      XMLHttpRequestUpload.__super__.constructor.call(this);\n      this._request = request;\n      this._reset();\n    }\n\n    XMLHttpRequestUpload.prototype._reset = function() {\n      this._contentType = null;\n      this._body = null;\n      return void 0;\n    };\n\n    XMLHttpRequestUpload.prototype._setData = function(data) {\n      var body, i, j, k, offset, ref, ref1, view;\n      if (typeof data === 'undefined' || data === null) {\n        return;\n      }\n      if (typeof data === 'string') {\n        if (data.length !== 0) {\n          this._contentType = 'text/plain;charset=UTF-8';\n        }\n        this._body = new Buffer(data, 'utf8');\n      } else if (Buffer.isBuffer(data)) {\n        this._body = data;\n      } else if (data instanceof ArrayBuffer) {\n        body = new Buffer(data.byteLength);\n        view = new Uint8Array(data);\n        for (i = j = 0, ref = data.byteLength; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n          body[i] = view[i];\n        }\n        this._body = body;\n      } else if (data.buffer && data.buffer instanceof ArrayBuffer) {\n        body = new Buffer(data.byteLength);\n        offset = data.byteOffset;\n        view = new Uint8Array(data.buffer);\n        for (i = k = 0, ref1 = data.byteLength; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {\n          body[i] = view[i + offset];\n        }\n        this._body = body;\n      } else {\n        throw new Error(\"Unsupported send() data \" + data);\n      }\n      return void 0;\n    };\n\n    XMLHttpRequestUpload.prototype._finalizeHeaders = function(headers, loweredHeaders) {\n      if (this._contentType) {\n        if (!('content-type' in loweredHeaders)) {\n          headers['Content-Type'] = this._contentType;\n        }\n      }\n      if (this._body) {\n        headers['Content-Length'] = this._body.length.toString();\n      }\n      return void 0;\n    };\n\n    XMLHttpRequestUpload.prototype._startUpload = function(request) {\n      if (this._body) {\n        request.write(this._body);\n      }\n      request.end();\n      return void 0;\n    };\n\n    return XMLHttpRequestUpload;\n\n  })(XMLHttpRequestEventTarget);\n\n  XMLHttpRequest.XMLHttpRequestUpload = XMLHttpRequestUpload;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-xhr2/node_modules/xhr2/lib/browser.js":"module.exports = XMLHttpRequest;\n"}